// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License.  See License.txt in the project root for license information.
// This is an auto generated file. Please run the template to modify it.
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.OData.Edm;
using Microsoft.OData.Edm.Vocabularies;

namespace Microsoft.OData.ModelBuilder.Capabilities.V1
{
    /// <summary>
    /// Restrictions on /$count path suffix and $count=true system query option
    /// </summary>
    public partial class CountRestrictionsConfiguration : VocabularyTermConfiguration
    {
        private readonly Dictionary<string, object> _dynamicProperties = new Dictionary<string, object>();
        private bool? _countable;
        private readonly HashSet<EdmPropertyPathExpression> _nonCountableProperties = new HashSet<EdmPropertyPathExpression>();
        private readonly HashSet<EdmNavigationPropertyPathExpression> _nonCountableNavigationProperties = new HashSet<EdmNavigationPropertyPathExpression>();

        /// <inheritdoc/>
        public override string TermName => "Org.OData.Capabilities.V1.CountRestrictions";

        /// <summary>
        /// Dynamic properties.
        /// </summary>
        /// <param name="name">The name to set</param>
        /// <param name="value">The value to set</param>
        /// <returns><see cref="CountRestrictionsConfiguration"/></returns>
        public CountRestrictionsConfiguration HasDynamicProperty(string name, object value)
        {
            _dynamicProperties[name] = value;
            return this;
        }

        /// <summary>
        /// Entities can be counted (only valid if targeting an entity set)
        /// </summary>
        /// <param name="countable">The value to set</param>
        /// <returns><see cref="CountRestrictionsConfiguration"/></returns>
        public CountRestrictionsConfiguration IsCountable(bool countable)
        {
            _countable = countable;
            return this;
        }

        /// <summary>
        /// Members of these collection properties cannot be counted
        /// </summary>
        /// <param name="nonCountableProperties">The value(s) to set</param>
        /// <returns><see cref="CountRestrictionsConfiguration"/></returns>
        public CountRestrictionsConfiguration HasNonCountableProperties(params EdmPropertyPathExpression[] nonCountableProperties)
        {
            _nonCountableProperties.UnionWith(nonCountableProperties);
            return this;
        }

        /// <summary>
        /// Members of these navigation properties cannot be counted
        /// </summary>
        /// <param name="nonCountableNavigationProperties">The value(s) to set</param>
        /// <returns><see cref="CountRestrictionsConfiguration"/></returns>
        public CountRestrictionsConfiguration HasNonCountableNavigationProperties(params EdmNavigationPropertyPathExpression[] nonCountableNavigationProperties)
        {
            _nonCountableNavigationProperties.UnionWith(nonCountableNavigationProperties);
            return this;
        }

        /// <inheritdoc/>
        public override IEdmExpression ToEdmExpression()
        {
            var properties = new List<IEdmPropertyConstructor>();

            if (_countable.HasValue)
            {
                properties.Add(new EdmPropertyConstructor("Countable", new EdmBooleanConstant(_countable.Value)));
            }

            if (_nonCountableProperties.Any())
            {
                var collection = _nonCountableProperties.Where(item => item != null);
                if (collection.Any())
                {
                    properties.Add(new EdmPropertyConstructor("NonCountableProperties", new EdmCollectionExpression(collection)));
                }
            }

            if (_nonCountableNavigationProperties.Any())
            {
                var collection = _nonCountableNavigationProperties.Where(item => item != null);
                if (collection.Any())
                {
                    properties.Add(new EdmPropertyConstructor("NonCountableNavigationProperties", new EdmCollectionExpression(collection)));
                }
            }

            properties.AddRange(_dynamicProperties.ToEdmProperties());

            if (!properties.Any())
            {
                return null;
            }

            return new EdmRecordExpression(properties);
        }
    }
}
