// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License.  See License.txt in the project root for license information.
// This is an auto generated file. Please run the template to modify it.
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.OData.Edm;
using Microsoft.OData.Edm.Vocabularies;

namespace Microsoft.OData.ModelBuilder.Core.V1
{
    /// <summary>
    /// The Link term is inspired by the `atom:link` element, see [RFC4287](https://tools.ietf.org/html/rfc4287#section-4.2.7), and the `Link` HTTP header, see [RFC5988](https://tools.ietf.org/html/rfc5988)
    /// </summary>
    public partial class LinkConfiguration : IRecord
    {
        private readonly Dictionary<string, object> _dynamicProperties = new Dictionary<string, object>();
        private string _rel;
        private string _href;

        /// <summary>
        /// Creates a new instance of <see cref="LinkConfiguration"/>
        /// </summary>
        public LinkConfiguration()
        {
        }

        /// <summary>
        /// Dynamic properties.
        /// </summary>
        /// <param name="name">The name to set</param>
        /// <param name="value">The value to set</param>
        /// <returns><see cref="LinkConfiguration"/></returns>
        public LinkConfiguration HasDynamicProperty(string name, object value)
        {
            _dynamicProperties[name] = value;
            return this;
        }

        /// <summary>
        /// Link relation type, see [IANA Link Relations](http://www.iana.org/assignments/link-relations/link-relations.xhtml)
        /// </summary>
        /// <param name="rel">The value to set</param>
        /// <returns><see cref="LinkConfiguration"/></returns>
        public LinkConfiguration Hasrel(string rel)
        {
            _rel = rel;
            return this;
        }

        /// <summary>
        /// URL of related information
        /// </summary>
        /// <param name="href">The value to set</param>
        /// <returns><see cref="LinkConfiguration"/></returns>
        public LinkConfiguration Hashref(string href)
        {
            _href = href;
            return this;
        }

        /// <inheritdoc/>
        public IEdmExpression ToEdmExpression()
        {
            var properties = new List<IEdmPropertyConstructor>();

            if (!string.IsNullOrEmpty(_rel))
            {
                properties.Add(new EdmPropertyConstructor("rel", new EdmStringConstant(_rel)));
            }

            if (!string.IsNullOrEmpty(_href))
            {
                properties.Add(new EdmPropertyConstructor("href", new EdmStringConstant(_href)));
            }

            properties.AddRange(_dynamicProperties.ToEdmProperties());

            if (!properties.Any())
            {
                return null;
            }

            return new EdmRecordExpression(properties);
        }
    }
}
