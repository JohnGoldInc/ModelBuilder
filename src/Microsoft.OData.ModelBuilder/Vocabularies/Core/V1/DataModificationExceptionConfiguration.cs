// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License.  See License.txt in the project root for license information.
// This is an auto generated file. Please run the template to modify it.
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.OData.Edm;
using Microsoft.OData.Edm.Vocabularies;

namespace Microsoft.OData.ModelBuilder.Core.V1
{
    /// <summary>
    /// A modification operation failed on the annotated instance or collection within a success payload
    /// </summary>
    public partial class DataModificationExceptionConfiguration : VocabularyTermConfiguration
    {
        private readonly Dictionary<string, object> _dynamicProperties = new Dictionary<string, object>();
        private MessageTypeConfiguration _info;
        private DataModificationOperationKind? _failedOperation;
        private int? _responseCode;

        /// <inheritdoc/>
        public override string TermName => "Org.OData.Core.V1.DataModificationException";

        /// <summary>
        /// Dynamic properties.
        /// </summary>
        /// <param name="name">The name to set</param>
        /// <param name="value">The value to set</param>
        /// <returns><see cref="DataModificationExceptionConfiguration"/></returns>
        public DataModificationExceptionConfiguration HasDynamicProperty(string name, object value)
        {
            _dynamicProperties[name] = value;
            return this;
        }

        /// <summary>
        /// Information about the exception
        /// </summary>
        /// <param name="infoConfiguration">The configuration to set</param>
        /// <returns><see cref="DataModificationExceptionConfiguration"/></returns>
        public DataModificationExceptionConfiguration Hasinfo(Func<MessageTypeConfiguration, MessageTypeConfiguration> infoConfiguration)
        {
            var instance = _info ?? new MessageTypeConfiguration();
            instance = infoConfiguration?.Invoke(instance);
            return Hasinfo(instance);
        }

        /// <summary>
        /// Information about the exception
        /// </summary>
        /// <param name="info">The value to set</param>
        /// <returns><see cref="DataModificationExceptionConfiguration"/></returns>
        public DataModificationExceptionConfiguration Hasinfo(MessageTypeConfiguration info)
        {
            _info = info;
            return this;
        }

        /// <summary>
        /// The kind of modification operation that failed
        /// </summary>
        /// <param name="failedOperation">The value to set</param>
        /// <returns><see cref="DataModificationExceptionConfiguration"/></returns>
        public DataModificationExceptionConfiguration HasfailedOperation(DataModificationOperationKind failedOperation)
        {
            _failedOperation = failedOperation;
            return this;
        }

        /// <summary>
        /// Response code of the failed operation, e.g. 424 for a failed dependency
        /// </summary>
        /// <param name="responseCode">The value to set</param>
        /// <returns><see cref="DataModificationExceptionConfiguration"/></returns>
        public DataModificationExceptionConfiguration HasresponseCode(int responseCode)
        {
            _responseCode = responseCode;
            return this;
        }

        /// <inheritdoc/>
        public override IEdmExpression ToEdmExpression()
        {
            var properties = new List<IEdmPropertyConstructor>();

            if (_info != null)
            {
                properties.Add(new EdmPropertyConstructor("info", _info.ToEdmExpression()));
            }

            if (_failedOperation.HasValue)
            {
                var enumType = new EdmEnumType("Org.OData.Core.V1", "DataModificationOperationKind", false);
                var enumMember = new EdmEnumMember(enumType, _failedOperation.ToString(), new EdmEnumMemberValue((long)_failedOperation.Value));
                properties.Add(new EdmPropertyConstructor("failedOperation", new EdmEnumMemberExpression(enumMember)));
            }

            if (_responseCode.HasValue)
            {
                properties.Add(new EdmPropertyConstructor("responseCode", new EdmIntegerConstant(_responseCode.Value)));
            }

            properties.AddRange(_dynamicProperties.ToEdmProperties());

            if (!properties.Any())
            {
                return null;
            }

            return new EdmRecordExpression(properties);
        }
    }
}
