// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License.  See License.txt in the project root for license information.
// This is an auto generated file. Please run the template to modify it.
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.OData.Edm;
using Microsoft.OData.Edm.Vocabularies;

namespace Microsoft.OData.ModelBuilder.Core.V1
{
    /// <summary>
    /// Org.OData.Core.V1.PropertyRef
    /// </summary>
    public partial class PropertyRefConfiguration : IRecord
    {
        private readonly Dictionary<string, object> _dynamicProperties = new Dictionary<string, object>();
        private EdmPropertyPathExpression _name;
        private string _alias;

        /// <summary>
        /// Creates a new instance of <see cref="PropertyRefConfiguration"/>
        /// </summary>
        public PropertyRefConfiguration()
        {
        }

        /// <summary>
        /// Dynamic properties.
        /// </summary>
        /// <param name="name">The name to set</param>
        /// <param name="value">The value to set</param>
        /// <returns><see cref="PropertyRefConfiguration"/></returns>
        public PropertyRefConfiguration HasDynamicProperty(string name, object value)
        {
            _dynamicProperties[name] = value;
            return this;
        }

        /// <summary>
        /// A path expression resolving to a primitive property of the entity type itself or to a primitive property of a complex or navigation property (recursively) of the entity type. The names of the properties in the path are joined together by forward slashes.
        /// </summary>
        /// <param name="name">The value to set</param>
        /// <returns><see cref="PropertyRefConfiguration"/></returns>
        public PropertyRefConfiguration HasName(EdmPropertyPathExpression name)
        {
            _name = name;
            return this;
        }

        /// <summary>
        /// A SimpleIdentifier that MUST be unique within the set of aliases, structural and navigation properties of the containing entity type that MUST be used in the key predicate of URLs
        /// </summary>
        /// <param name="alias">The value to set</param>
        /// <returns><see cref="PropertyRefConfiguration"/></returns>
        public PropertyRefConfiguration HasAlias(string alias)
        {
            _alias = alias;
            return this;
        }

        /// <inheritdoc/>
        public IEdmExpression ToEdmExpression()
        {
            var properties = new List<IEdmPropertyConstructor>();

            if (_name != null)
            {
                properties.Add(new EdmPropertyConstructor("Name", _name));
            }

            if (!string.IsNullOrEmpty(_alias))
            {
                properties.Add(new EdmPropertyConstructor("Alias", new EdmStringConstant(_alias)));
            }

            properties.AddRange(_dynamicProperties.ToEdmProperties());

            if (!properties.Any())
            {
                return null;
            }

            return new EdmRecordExpression(properties);
        }
    }
}
