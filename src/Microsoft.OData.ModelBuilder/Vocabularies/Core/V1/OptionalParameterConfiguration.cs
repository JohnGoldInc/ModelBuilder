// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License.  See License.txt in the project root for license information.
// This is an auto generated file. Please run the template to modify it.
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.OData.Edm;
using Microsoft.OData.Edm.Vocabularies;

namespace Microsoft.OData.ModelBuilder.Core.V1
{
    /// <summary>
    /// Supplying a value for the action or function parameter is optional.
    /// All parameters marked as optional must come after any parameters not marked as optional. The binding parameter must not be marked as optional.
    /// </summary>
    public partial class OptionalParameterConfiguration : VocabularyTermConfiguration
    {
        private readonly Dictionary<string, object> _dynamicProperties = new Dictionary<string, object>();
        private string _defaultValue;

        /// <inheritdoc/>
        public override string TermName => "Org.OData.Core.V1.OptionalParameter";

        /// <summary>
        /// Dynamic properties.
        /// </summary>
        /// <param name="name">The name to set</param>
        /// <param name="value">The value to set</param>
        /// <returns><see cref="OptionalParameterConfiguration"/></returns>
        public OptionalParameterConfiguration HasDynamicProperty(string name, object value)
        {
            _dynamicProperties[name] = value;
            return this;
        }

        /// <summary>
        /// Default value for an optional parameter of primitive or enumeration type, using the same rules as the `cast` function in URLs.
        /// If no explicit DefaultValue is specified, the service is free on how to interpret omitting the parameter from the request. For example, a service might interpret an omitted optional parameter `KeyDate` as having the current date.
        /// </summary>
        /// <param name="defaultValue">The value to set</param>
        /// <returns><see cref="OptionalParameterConfiguration"/></returns>
        public OptionalParameterConfiguration HasDefaultValue(string defaultValue)
        {
            _defaultValue = defaultValue;
            return this;
        }

        /// <inheritdoc/>
        public override IEdmExpression ToEdmExpression()
        {
            var properties = new List<IEdmPropertyConstructor>();

            if (!string.IsNullOrEmpty(_defaultValue))
            {
                properties.Add(new EdmPropertyConstructor("DefaultValue", new EdmStringConstant(_defaultValue)));
            }

            properties.AddRange(_dynamicProperties.ToEdmProperties());

            if (!properties.Any())
            {
                return null;
            }

            return new EdmRecordExpression(properties);
        }
    }
}
