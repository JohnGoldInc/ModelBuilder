// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License.  See License.txt in the project root for license information.
// This is an auto generated file. Please run the template to modify it.
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.OData.Edm;
using Microsoft.OData.Edm.Vocabularies;

namespace Microsoft.OData.ModelBuilder.Core.V1
{
    /// <summary>
    /// Permissions for accessing a resource
    /// </summary>
    public partial class PermissionsConfiguration : VocabularyTermConfiguration
    {
        private readonly Dictionary<string, object> _dynamicProperties = new Dictionary<string, object>();
        private Permission? _permissions;

        /// <inheritdoc/>
        public override string TermName => "Org.OData.Core.V1.Permissions";

        /// <summary>
        /// Permissions for accessing a resource
        /// </summary>
        /// <param name="permissions">The value to set</param>
        /// <returns><see cref="PermissionsConfiguration"/></returns>
        public PermissionsConfiguration HasPermissions(Permission permissions)
        {
            _permissions = permissions;
            return this;
        }

        /// <inheritdoc/>
        public override IEdmExpression ToEdmExpression()
        {
            var properties = new List<IEdmPropertyConstructor>();

            if (_permissions.HasValue)
            {
                var enumType = new EdmEnumType("Org.OData.Core.V1", "Permission", true);
                var enumMember = new EdmEnumMember(enumType, _permissions.ToString(), new EdmEnumMemberValue((long)_permissions.Value));
                properties.Add(new EdmPropertyConstructor("Permissions", new EdmEnumMemberExpression(enumMember)));
            }

            properties.AddRange(_dynamicProperties.ToEdmProperties());

            if (!properties.Any())
            {
                return null;
            }

            return new EdmRecordExpression(properties);
        }
    }
}
