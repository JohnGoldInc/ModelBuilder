// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License.  See License.txt in the project root for license information.
// This is an auto generated file. Please run the template to modify it.
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.OData.Edm;
using Microsoft.OData.Edm.Vocabularies;

namespace Microsoft.OData.ModelBuilder.Core.V1
{
    /// <summary>
    /// Communicates available alternate keys
    /// </summary>
    public partial class AlternateKeysConfiguration : VocabularyTermConfiguration
    {
        private readonly HashSet<AlternateKeyConfiguration> _alternateKeys = new HashSet<AlternateKeyConfiguration>();

        /// <inheritdoc/>
        public override string TermName => "Org.OData.Core.V1.AlternateKeys";

        /// <summary>
        /// Communicates available alternate keys
        /// </summary>
        /// <param name="alternateKeysConfiguration">The configuration to set</param>
        /// <returns><see cref="AlternateKeysConfiguration"/></returns>
        public AlternateKeysConfiguration HasAlternateKeys(Func<AlternateKeyConfiguration, AlternateKeyConfiguration> alternateKeysConfiguration)
        {
            var instance = new AlternateKeyConfiguration();
            instance = alternateKeysConfiguration?.Invoke(instance);
            return HasAlternateKeys(instance);
        }

        /// <summary>
        /// Communicates available alternate keys
        /// </summary>
        /// <param name="alternateKeys">The value(s) to set</param>
        /// <returns><see cref="AlternateKeysConfiguration"/></returns>
        public AlternateKeysConfiguration HasAlternateKeys(params AlternateKeyConfiguration[] alternateKeys)
        {
            _alternateKeys.UnionWith(alternateKeys);
            return this;
        }

        /// <inheritdoc/>
        public override IEdmExpression ToEdmExpression()
        {
            if (!_alternateKeys.Any())
            {
                return null;
            }

            var records = _alternateKeys.Select(item => item.ToEdmExpression());
            return new EdmCollectionExpression(records);
        }
    }
}
