// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License.  See License.txt in the project root for license information.
// This is an auto generated file. Please run the template to modify it.
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.OData.Edm;
using Microsoft.OData.Edm.Vocabularies;

namespace Microsoft.OData.ModelBuilder.Core.V1
{
    /// <summary>
    /// Org.OData.Core.V1.MessageType
    /// </summary>
    public partial class MessageTypeConfiguration : IRecord
    {
        private readonly Dictionary<string, object> _dynamicProperties = new Dictionary<string, object>();
        private string _code;
        private string _message;
        private string _severity;
        private string _target;
        private readonly HashSet<MessageTypeConfiguration> _details = new HashSet<MessageTypeConfiguration>();

        /// <summary>
        /// Creates a new instance of <see cref="MessageTypeConfiguration"/>
        /// </summary>
        public MessageTypeConfiguration()
        {
        }

        /// <summary>
        /// Dynamic properties.
        /// </summary>
        /// <param name="name">The name to set</param>
        /// <param name="value">The value to set</param>
        /// <returns><see cref="MessageTypeConfiguration"/></returns>
        public MessageTypeConfiguration HasDynamicProperty(string name, object value)
        {
            _dynamicProperties[name] = value;
            return this;
        }

        /// <summary>
        /// Machine-readable, language-independent message code
        /// </summary>
        /// <param name="code">The value to set</param>
        /// <returns><see cref="MessageTypeConfiguration"/></returns>
        public MessageTypeConfiguration Hascode(string code)
        {
            _code = code;
            return this;
        }

        /// <summary>
        /// Human-readable, language-dependent message text
        /// </summary>
        /// <param name="message">The value to set</param>
        /// <returns><see cref="MessageTypeConfiguration"/></returns>
        public MessageTypeConfiguration Hasmessage(string message)
        {
            _message = message;
            return this;
        }

        /// <summary>
        /// Severity of the message
        /// </summary>
        /// <param name="severity">The value to set</param>
        /// <returns><see cref="MessageTypeConfiguration"/></returns>
        public MessageTypeConfiguration Hasseverity(string severity)
        {
            _severity = severity;
            return this;
        }

        /// <summary>
        /// A path to the target of the message detail, relative to the annotated instance
        /// </summary>
        /// <param name="target">The value to set</param>
        /// <returns><see cref="MessageTypeConfiguration"/></returns>
        public MessageTypeConfiguration Hastarget(string target)
        {
            _target = target;
            return this;
        }

        /// <summary>
        /// List of detail messages
        /// </summary>
        /// <param name="detailsConfiguration">The configuration to set</param>
        /// <returns><see cref="MessageTypeConfiguration"/></returns>
        public MessageTypeConfiguration Hasdetails(Func<MessageTypeConfiguration, MessageTypeConfiguration> detailsConfiguration)
        {
            var instance = new MessageTypeConfiguration();
            instance = detailsConfiguration?.Invoke(instance);
            return Hasdetails(instance);
        }

        /// <summary>
        /// List of detail messages
        /// </summary>
        /// <param name="details">The value(s) to set</param>
        /// <returns><see cref="MessageTypeConfiguration"/></returns>
        public MessageTypeConfiguration Hasdetails(params MessageTypeConfiguration[] details)
        {
            _details.UnionWith(details);
            return this;
        }

        /// <inheritdoc/>
        public IEdmExpression ToEdmExpression()
        {
            var properties = new List<IEdmPropertyConstructor>();

            if (!string.IsNullOrEmpty(_code))
            {
                properties.Add(new EdmPropertyConstructor("code", new EdmStringConstant(_code)));
            }

            if (!string.IsNullOrEmpty(_message))
            {
                properties.Add(new EdmPropertyConstructor("message", new EdmStringConstant(_message)));
            }

            if (!string.IsNullOrEmpty(_severity))
            {
                properties.Add(new EdmPropertyConstructor("severity", new EdmStringConstant(_severity)));
            }

            if (!string.IsNullOrEmpty(_target))
            {
                properties.Add(new EdmPropertyConstructor("target", new EdmStringConstant(_target)));
            }

            if (_details.Any())
            {
                var collection = _details.Select(item => item.ToEdmExpression()).Where(item => item != null);
                if (collection.Any())
                {
                    properties.Add(new EdmPropertyConstructor("details", new EdmCollectionExpression(collection)));
                }
            }

            properties.AddRange(_dynamicProperties.ToEdmProperties());

            if (!properties.Any())
            {
                return null;
            }

            return new EdmRecordExpression(properties);
        }
    }
}
